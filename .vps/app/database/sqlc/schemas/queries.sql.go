// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package schemas

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createHistory = `-- name: CreateHistory :one
INSERT INTO public.history (money, source, source_web, change, created_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, money, source, source_web, change, created_at
`

type CreateHistoryParams struct {
	Money     string           `json:"money"`
	Source    string           `json:"source"`
	SourceWeb string           `json:"source_web"`
	Change    float64          `json:"change"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateHistory(ctx context.Context, arg CreateHistoryParams) (History, error) {
	row := q.db.QueryRow(ctx, createHistory,
		arg.Money,
		arg.Source,
		arg.SourceWeb,
		arg.Change,
		arg.CreatedAt,
	)
	var i History
	err := row.Scan(
		&i.ID,
		&i.Money,
		&i.Source,
		&i.SourceWeb,
		&i.Change,
		&i.CreatedAt,
	)
	return i, err
}

const createPayment = `-- name: CreatePayment :one
INSERT INTO public.payments (subscription_id, amount, payment_date, payment_method, created_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, subscription_id, amount, payment_date, payment_method, created_at
`

type CreatePaymentParams struct {
	SubscriptionID int64            `json:"subscription_id"`
	Amount         pgtype.Numeric   `json:"amount"`
	PaymentDate    pgtype.Timestamp `json:"payment_date"`
	PaymentMethod  string           `json:"payment_method"`
	CreatedAt      pgtype.Timestamp `json:"created_at"`
}

// table payments
func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, createPayment,
		arg.SubscriptionID,
		arg.Amount,
		arg.PaymentDate,
		arg.PaymentMethod,
		arg.CreatedAt,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.SubscriptionID,
		&i.Amount,
		&i.PaymentDate,
		&i.PaymentMethod,
		&i.CreatedAt,
	)
	return i, err
}

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO public.subscriptions (user_id, start_date, end_date, status, created_at)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, user_id, start_date, end_date, status, created_at
`

type CreateSubscriptionParams struct {
	UserID    int64            `json:"user_id"`
	StartDate pgtype.Timestamp `json:"start_date"`
	EndDate   pgtype.Timestamp `json:"end_date"`
	Status    string           `json:"status"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

// table subscriptions
func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRow(ctx, createSubscription,
		arg.UserID,
		arg.StartDate,
		arg.EndDate,
		arg.Status,
		arg.CreatedAt,
	)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO public.users (email, password, created_at)
VALUES ($1, $2, $3)
RETURNING id, email, password, created_at
`

type CreateUserParams struct {
	Email     string           `json:"email"`
	Password  string           `json:"password"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

// table users
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Password, arg.CreatedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const deletePayment = `-- name: DeletePayment :exec
DELETE FROM public.payments
WHERE id = $1
`

func (q *Queries) DeletePayment(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePayment, id)
	return err
}

const deleteSubscription = `-- name: DeleteSubscription :exec
DELETE FROM public.subscriptions
WHERE id = $1
`

func (q *Queries) DeleteSubscription(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSubscription, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM public.users
WHERE email = $1
`

func (q *Queries) DeleteUser(ctx context.Context, email string) error {
	_, err := q.db.Exec(ctx, deleteUser, email)
	return err
}

const findHistory = `-- name: FindHistory :one
SELECT id, money, source, source_web, change, created_at
FROM public.history
WHERE id = $1
`

func (q *Queries) FindHistory(ctx context.Context, id int64) (History, error) {
	row := q.db.QueryRow(ctx, findHistory, id)
	var i History
	err := row.Scan(
		&i.ID,
		&i.Money,
		&i.Source,
		&i.SourceWeb,
		&i.Change,
		&i.CreatedAt,
	)
	return i, err
}

const getLastHistory = `-- name: GetLastHistory :one
SELECT id, money, source, source_web, change, created_at
FROM public.history
WHERE money = $1 AND source = $2 AND source_web = $3
ORDER BY id DESC
LIMIT 1
`

type GetLastHistoryParams struct {
	Money     string `json:"money"`
	Source    string `json:"source"`
	SourceWeb string `json:"source_web"`
}

// table history
func (q *Queries) GetLastHistory(ctx context.Context, arg GetLastHistoryParams) (History, error) {
	row := q.db.QueryRow(ctx, getLastHistory, arg.Money, arg.Source, arg.SourceWeb)
	var i History
	err := row.Scan(
		&i.ID,
		&i.Money,
		&i.Source,
		&i.SourceWeb,
		&i.Change,
		&i.CreatedAt,
	)
	return i, err
}

const getPayment = `-- name: GetPayment :many
SELECT id, subscription_id, amount, payment_date, payment_method, created_at FROM public.payments
WHERE subscription_id = $1
`

func (q *Queries) GetPayment(ctx context.Context, subscriptionID int64) ([]Payment, error) {
	rows, err := q.db.Query(ctx, getPayment, subscriptionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Payment
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.SubscriptionID,
			&i.Amount,
			&i.PaymentDate,
			&i.PaymentMethod,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubscription = `-- name: GetSubscription :one
SELECT id, user_id, start_date, end_date, status, created_at FROM public.subscriptions
WHERE user_id = $1
`

func (q *Queries) GetSubscription(ctx context.Context, userID int64) (Subscription, error) {
	row := q.db.QueryRow(ctx, getSubscription, userID)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, email, password, created_at FROM public.users
WHERE email = $1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const listHistory = `-- name: ListHistory :many
SELECT id, money, source, source_web, change, created_at
FROM public.history
WHERE source_web = $1
  AND created_at >= $2::timestamp - INTERVAL '8 hours'
ORDER BY id DESC
LIMIT $3
`

type ListHistoryParams struct {
	SourceWeb string           `json:"source_web"`
	Column2   pgtype.Timestamp `json:"column_2"`
	Limit     int32            `json:"limit"`
}

func (q *Queries) ListHistory(ctx context.Context, arg ListHistoryParams) ([]History, error) {
	rows, err := q.db.Query(ctx, listHistory, arg.SourceWeb, arg.Column2, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []History
	for rows.Next() {
		var i History
		if err := rows.Scan(
			&i.ID,
			&i.Money,
			&i.Source,
			&i.SourceWeb,
			&i.Change,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePayment = `-- name: UpdatePayment :one
UPDATE public.payments
SET amount = $2, payment_date = $3, payment_method = $4
WHERE id = $1
RETURNING id, subscription_id, amount, payment_date, payment_method, created_at
`

type UpdatePaymentParams struct {
	ID            int64            `json:"id"`
	Amount        pgtype.Numeric   `json:"amount"`
	PaymentDate   pgtype.Timestamp `json:"payment_date"`
	PaymentMethod string           `json:"payment_method"`
}

func (q *Queries) UpdatePayment(ctx context.Context, arg UpdatePaymentParams) (Payment, error) {
	row := q.db.QueryRow(ctx, updatePayment,
		arg.ID,
		arg.Amount,
		arg.PaymentDate,
		arg.PaymentMethod,
	)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.SubscriptionID,
		&i.Amount,
		&i.PaymentDate,
		&i.PaymentMethod,
		&i.CreatedAt,
	)
	return i, err
}

const updateSubscription = `-- name: UpdateSubscription :one
UPDATE public.subscriptions
SET end_date = $2, status = $3
WHERE user_id = $1
RETURNING id, user_id, start_date, end_date, status, created_at
`

type UpdateSubscriptionParams struct {
	UserID  int64            `json:"user_id"`
	EndDate pgtype.Timestamp `json:"end_date"`
	Status  string           `json:"status"`
}

func (q *Queries) UpdateSubscription(ctx context.Context, arg UpdateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRow(ctx, updateSubscription, arg.UserID, arg.EndDate, arg.Status)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StartDate,
		&i.EndDate,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE public.users
SET email = $2, password = $3
WHERE id = $1
RETURNING id, email, password, created_at
`

type UpdateUserParams struct {
	ID       int64  `json:"id"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}
